[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.9"
dependencies = [
    "langchain-core<1.0.0,>=0.3.66",
    "langchain-text-splitters<1.0.0,>=0.3.8",
    "langsmith>=0.1.17",
    "pydantic<3.0.0,>=2.7.4",
    "SQLAlchemy<3,>=1.4",
    "requests<3,>=2",
    "PyYAML>=5.3",
    "async-timeout<5.0.0,>=4.0.0; python_version < \"3.11\"",
]
name = "langchain"
version = "0.3.26"
description = "Building applications with LLMs through composability"
readme = "README.md"

[project.optional-dependencies]
community = ["langchain-community"]
anthropic = ["langchain-anthropic"]
openai = ["langchain-openai"]
azure-ai = ["langchain-azure-ai"]
cohere = ["langchain-cohere"]
google-vertexai = ["langchain-google-vertexai"]
google-genai = ["langchain-google-genai"]
fireworks = ["langchain-fireworks"]
ollama = ["langchain-ollama"]
together = ["langchain-together"]
mistralai = ["langchain-mistralai"]
huggingface = ["langchain-huggingface"]
groq = ["langchain-groq"]
aws = ["langchain-aws"]
deepseek = ["langchain-deepseek"]
xai = ["langchain-xai"]
perplexity = ["langchain-perplexity"]

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/langchain"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain"

[dependency-groups]
test = [
    "pytest<9,>=8",
    "pytest-cov<5.0.0,>=4.0.0",
    "pytest-dotenv<1.0.0,>=0.5.2",
    "duckdb-engine<1.0.0,>=0.9.2",
    "pytest-watcher<1.0.0,>=0.2.6",
    "freezegun<2.0.0,>=1.2.2",
    "responses<1.0.0,>=0.22.0",
    "pytest-asyncio<1.0.0,>=0.23.2",
    "lark<2.0.0,>=1.1.5",
    "pandas<3.0.0,>=2.0.0",
    "pytest-mock<4.0.0,>=3.10.0",
    "pytest-socket<1.0.0,>=0.6.0",
    "syrupy<5.0.0,>=4.0.2",
    "requests-mock<2.0.0,>=1.11.0",
    "pytest-xdist<4.0.0,>=3.6.1",
    "blockbuster<1.6,>=1.5.18",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
    "langchain-tests",
    "langchain-core",
    "langchain-text-splitters",
    "langchain-openai",
    "toml>=0.10.2",
    "packaging>=24.2",
    "numpy>=1.26.4; python_version<'3.13'",
    "numpy>=2.1.0; python_version>='3.13'",
]
codespell = ["codespell<3.0.0,>=2.2.0"]
test_integration = [
    "vcrpy>=7.0",
    "urllib3<2; python_version < \"3.10\"",
    "wrapt<2.0.0,>=1.15.0",
    "python-dotenv<2.0.0,>=1.0.0",
    "cassio<1.0.0,>=0.1.0",
    "langchainhub<1.0.0,>=0.1.16",
    "langchain-core",
    "langchain-text-splitters",
]
lint = [
    "ruff<0.13,>=0.12.2",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
]
typing = [
    "mypy<1.16,>=1.15",
    "types-pyyaml<7.0.0.0,>=6.0.12.2",
    "types-requests<3.0.0.0,>=2.28.11.5",
    "types-toml<1.0.0.0,>=0.10.8.1",
    "types-redis<5.0.0.0,>=4.3.21.6",
    "types-pytz<2024.0.0.0,>=2023.3.0.0",
    "types-chardet<6.0.0.0,>=5.0.4.6",
    "mypy-protobuf<4.0.0,>=3.0.0",
    "langchain-core",
    "langchain-text-splitters",
    "numpy>=1.26.4; python_version < '3.13'",
    "numpy>=2.1.0; python_version >= '3.13'",
]
dev = [
    "jupyter<2.0.0,>=1.0.0",
    "playwright<2.0.0,>=1.28.0",
    "setuptools<68.0.0,>=67.6.1",
    "langchain-core",
    "langchain-text-splitters",
]


[tool.uv.sources]
langchain-core = { path = "../core", editable = true }
langchain-tests = { path = "../standard-tests", editable = true }
langchain-text-splitters = { path = "../text-splitters", editable = true }
langchain-openai = { path = "../partners/openai", editable = true }

[tool.ruff]
target-version = "py39"
exclude = ["tests/integration_tests/examples/non-utf8-encoding.py"]

[tool.mypy]
strict = "True"
strict_bytes = "True"
ignore_missing_imports = "True"
enable_error_code = "deprecated"
report_deprecated_as_note = "True"

# TODO: activate for 'strict' checking
disallow_untyped_calls = "False"
disallow_any_generics = "False"
disallow_untyped_decorators = "False"
warn_return_any = "False"
strict_equality = "False"

[tool.codespell]
skip = ".git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples,*.trig"
ignore-regex = ".*(Stati Uniti|Tense=Pres).*"
ignore-words-list = "momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate,aadd,symbl,precesses,accademia,nin"

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "B",      # flake8-bugbear
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "DOC",    # pydoclint
    "DTZ",    # flake8-datetimez
    "E",      # pycodestyle error
    "EM",     # flake8-errmsg
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT",    # flake8-boolean-trap
    "FLY",    # flake8-flynt
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # isort-comprehensions
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PERF",   # flake8-perf
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-rst-docstrings
    "RUF",    # ruff
    "S",      # flake8-bandit
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "D100",    # pydocstyle: Missing docstring in public module
    "D101",    # pydocstyle: Missing docstring in public class
    "D102",    # pydocstyle: Missing docstring in public method
    "D103",    # pydocstyle: Missing docstring in public function
    "D104",    # pydocstyle: Missing docstring in public package
    "D105",    # pydocstyle: Missing docstring in magic method
    "D107",    # pydocstyle: Missing docstring in __init__
    "D407",    # pydocstyle: Missing-dashed-underline-after-section
    "COM812",  # Messes with the formatter
    "ISC001",  # Messes with the formatter
    "PERF203", # Rarely useful
    "S112",    # Rarely useful
    "RUF012",  # Doesn't play well with Pydantic
    "SLF001",  # Private member access
    "UP007",   # pyupgrade: non-pep604-annotation-union
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

pydocstyle.convention = "google"
pyupgrade.keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"!langchain/indexes/vectorstore.py" = ["D"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Tests need assertions
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # Private member access in tests
]
"langchain/chains/constitutional_ai/principles.py" = [
    "E501", # Line too long
]
"**/retrievers/*time_weighted_retriever.py" = [
    "DTZ001", # Use of non timezone-aware datetime
    "DTZ005", # Use of non timezone-aware datetime
    "DTZ006", # Use of non timezone-aware datetime
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:tests",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:tests",
]
