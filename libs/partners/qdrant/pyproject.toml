[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.9"
dependencies = [
    "qdrant-client<2.0.0,>=1.10.1",
    "pydantic<3.0.0,>=2.7.4",
    "langchain-core!=0.3.0,!=0.3.1,!=0.3.10,!=0.3.11,!=0.3.12,!=0.3.13,!=0.3.14,!=0.3.2,!=0.3.3,!=0.3.4,!=0.3.5,!=0.3.6,!=0.3.7,!=0.3.8,!=0.3.9,<0.4.0,>=0.2.43",
]
name = "langchain-qdrant"
version = "0.2.0"
description = "An integration package connecting Qdrant and LangChain"
readme = "README.md"

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/partners/qdrant"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain-qdrant%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain"

[project.optional-dependencies]
fastembed = [
    "fastembed<1.0.0,>=0.3.3; python_version < \"3.13\" and python_version >= \"3.9\"",
]

[dependency-groups]
test = [
    "pytest<8.0.0,>=7.3.0",
    "freezegun<2.0.0,>=1.2.2",
    "pytest-mock<4.0.0,>=3.10.0",
    "syrupy<5.0.0,>=4.0.2",
    "pytest-watcher<1.0.0,>=0.3.4",
    "pytest-asyncio<1.0.0,>=0.21.1",
    "requests<3.0.0,>=2.31.0",
    "pytest-socket<1.0.0,>=0.7.0",
    "langchain-core",
]
codespell = ["codespell<3.0.0,>=2.2.0"]
test_integration = []
lint = ["ruff<0.13,>=0.12.2"]
dev = ["langchain-core"]
typing = ["mypy<2.0,>=1.10", "simsimd<7.0.0,>=6.0.0", "langchain-core"]

[tool.uv.sources]
langchain-core = { path = "../../core", editable = true }

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "B",      # flake8-bugbear
    "ASYNC",  # flake8-async
    "C4",     # flake8-comprehensions
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "E",      # pycodestyle error
    "EM",     # flake8-errmsg
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT",    # flake8-boolean-trap
    "FLY",    # flake8-flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # isort-comprehensions
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PERF",   # flake8-perf
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-rst-docstrings
    "RUF",    # ruff
    "S",      # flake8-bandit
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "D100",    # pydocstyle: Missing docstring in public module
    "D101",    # pydocstyle: Missing docstring in public class
    "D102",    # pydocstyle: Missing docstring in public method
    "D103",    # pydocstyle: Missing docstring in public function
    "D104",    # pydocstyle: Missing docstring in public package
    "D105",    # pydocstyle: Missing docstring in magic method
    "D107",    # pydocstyle: Missing docstring in __init__
    "D203",    # Messes with the formatter
    "D213",    # pydocstyle: Multi-line docstring summary should start at the second line (incompatible with D212)
    "D407",    # pydocstyle: Missing-dashed-underline-after-section
    "COM812",  # Messes with the formatter
    "ISC001",  # Messes with the formatter
    "PERF203", # Rarely useful
    "S112",    # Rarely useful
    "RUF012",  # Doesn't play well with Pydantic
    "SLF001",  # Private member access
    "UP007",   # pyupgrade: non-pep604-annotation-union
    "UP045",   # pyupgrade: non-pep604-annotation-optional
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

[tool.mypy]
disallow_untyped_defs = true

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
markers = [
    "requires: mark tests as requiring a specific library",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # Tests need assertions
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
