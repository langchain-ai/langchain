[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "langchain-serpex"
version = "0.1.0"
description = "An integration package connecting SERPEX and LangChain"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9,<4.0"
dependencies = [
    "langchain-core>=0.3.0,<0.4",
    "httpx>=0.27.0",
]

[project.urls]
Repository = "https://github.com/langchain-ai/langchain"

[tool.poetry]
name = "langchain-serpex"
version = "0.1.0"
description = "An integration package connecting SERPEX and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain"
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
langchain-core = ">=0.3.0,<0.4"
httpx = "^0.27.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.3.0"
pytest-asyncio = "^0.23.2"
langchain-core = { path = "../../core", develop = true }
langchain-standard-tests = { path = "../../standard-tests", develop = true }

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.0"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"

[tool.poetry.group.typing.dependencies]
mypy = "^1.7.1"
langchain-core = { path = "../../core", develop = true }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
langchain-core = { path = "../../core", develop = true }

[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # Pyflakes
  "UP", # pyupgrade
  "B",  # flake8-bugbear
  "I",  # isort
]
ignore = [
  "UP006", # Use `list` instead of `List` for type annotations
  "UP007", # Use `X | Y` for type annotations
]

[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5"
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
