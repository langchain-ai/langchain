[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "anthropic>=0.69.0,<1.0.0",
    "langchain-core>=1.0.0a8,<2.0.0",
    "pydantic>=2.7.4,<3.0.0",
]
name = "langchain-anthropic"
version = "1.0.0a4"
description = "Integration package connecting Claude (Anthropic) APIs and LangChain"
readme = "README.md"

[project.urls]
homepage = "https://docs.langchain.com/oss/python/integrations/providers/anthropic"
repository = "https://github.com/langchain-ai/langchain/tree/master/libs/partners/anthropic"
changelog = "https://github.com/langchain-ai/langchain/releases?q=%22langchain-anthropic%22"
docs = "https://reference.langchain.com/python/integrations/langchain_anthropic/"
twitter = "https://x.com/LangChainAI"
slack = "https://www.langchain.com/join-community"
reddit = "https://www.reddit.com/r/LangChain/"

[dependency-groups]
test = [
    "pytest>=7.3.0,<8.0.0",
    "freezegun>=1.2.2,<2.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "syrupy>=4.0.2,<5.0.0",
    "pytest-watcher>=0.3.4,<1.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "defusedxml>=0.7.1,<1.0.0",
    "pytest-retry>=1.7.0,<1.8.0",
    "pytest-timeout>=2.3.1,<3.0.0",
    "pytest-socket>=0.7.0,<1.0.0",
    "pytest-xdist>=3.8.0,<4.0.0",
    "vcrpy>=7.0.0,<8.0.0",
    "langchain-core",
    "langchain-tests",
    "langchain",
]
lint = ["ruff>=0.13.1,<0.14.0"]
dev = ["langchain-core"]
test_integration = ["requests>=2.32.3,<3.0.0", "langchain-core"]
typing = [
    "mypy>=1.17.1,<2.0.0",
    "types-requests>=2.31.0,<3.0.0",
    "langchain-core",
]


[tool.uv.sources]
langchain-core = { path = "../../core", editable = true }
langchain-tests = { path = "../../standard-tests", editable = true }
langchain = { path = "../../langchain_v1", editable = true }

[tool.mypy]
disallow_untyped_defs = "True"
plugins = ['pydantic.mypy']

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812",  # Messes with the formatter
    "ISC001",  # Messes with the formatter
    "PERF203", # Rarely useful
    "SIM105",  # Rarely useful
    "FIX",     # TODOs
    "TD",      # TODOs
    "C901",    # Complex functions
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0914", # Too many local variables
    "PLR0915", # Too many statements
    "ARG001",
    "PLR0911", # Too many return statements

    # TODO
    "PLR2004", # Comparison to magic number
    "ANN401",
    "ARG002",
    "BLE001",
    "TC",
    "PLC0415",
    "PT011",
    "PT013",
    "TRY",
    "PLW",
    "PLE",
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
markers = [
    "requires: mark tests as requiring a specific library",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true  # ignore missing documentation for *args and **kwargs parameters

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # Tests need assertions
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # Private member access in tests
    "D",     # Docstring checks in tests
]
"scripts/*.py" = [
    "INP001",   # Not a package
]
