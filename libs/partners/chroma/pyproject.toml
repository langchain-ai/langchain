[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=1.0.0a7,<2.0.0",
    "numpy>=1.26.0; python_version < '3.13'",
    "numpy>=2.1.0; python_version >= '3.13'",
    "chromadb>=1.0.20,<2.0.0",
]
name = "langchain-chroma"
version = "1.0.0a1"
description = "An integration package connecting Chroma and LangChain."
readme = "README.md"

[project.urls]
homepage = "https://docs.langchain.com/oss/python/integrations/providers/chroma"
repository = "https://github.com/langchain-ai/langchain/tree/master/libs/partners/chroma"
changelog = "https://github.com/langchain-ai/langchain/releases?q=%22langchain-chroma%22"
docs = "https://reference.langchain.com/python/integrations/langchain_chroma/"
twitter = "https://x.com/LangChainAI"
slack = "https://www.langchain.com/join-community"
reddit = "https://www.reddit.com/r/LangChain/"

[dependency-groups]
test = [
    "pytest>=7.3.0,<8.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-benchmark",
    "pytest-watcher>=0.3.4,<1.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "pytest-socket>=0.7.0,<1.0.0",
    "freezegun>=1.2.2,<2.0.0",
    "syrupy>=4.0.2,<5.0.0",
    "onnxruntime<1.20.0; python_version < \"3.10\"",
    "onnxruntime; python_version >= \"3.10\"",
    "langchain-core",
    "langchain-tests",
]
test_integration = []
lint = [
    "ruff>=0.13.1,<0.14.0",
    "onnxruntime<1.20; python_version < \"3.10\"",
    "onnxruntime; python_version >= \"3.10\"",
]
dev = ["langchain-core"]
typing = [
    "mypy>=1.10.0,<2.0.0",
    "types-requests>=2.31.0,<3.0.0",
    "langchain-core",
]


[tool.uv.sources]
langchain-core = { path = "../../core", editable = true }
langchain-tests = { path = "../../standard-tests", editable = true }

[tool.mypy]
disallow_untyped_defs = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [ "ALL" ]
ignore = [
    "COM812",  # Messes with the formatter
    "PLC0415", # Import top of file
    "FIX002",  # TODO
    "TD002",   # TODO
    "TD003",   # TODO
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "C901",    # Too complex

    # TODO
    "ANN204",
    "ANN401",
    "TRY201",
    "ARG002",
    "N803",
    "TC002",
    "TC003",
    "TRY300",
    "N806",
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = " --strict-markers --strict-config --durations=5"
markers = [
    "requires: mark tests as requiring a specific library",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true  # ignore missing documentation for *args and **kwargs parameters

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Tests need assertions
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001",  # Private member access in tests
    "PLR2004", # Comparison to magic number
    "PT011",   # Exception too broad
    "BLE001",  # Blind except
]
"scripts/*.py" = [
    "INP001",   # Not a package
]
