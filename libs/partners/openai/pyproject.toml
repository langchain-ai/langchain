[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
authors = []
license = { text = "MIT" }
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=1.0.0a7,<2.0.0",
    "openai>=1.109.1,<3.0.0",
    "tiktoken>=0.7.0,<1.0.0",
]
name = "langchain-openai"
version = "1.0.0a4"
description = "An integration package connecting OpenAI and LangChain"
readme = "README.md"

[project.urls]
homepage = "https://docs.langchain.com/oss/python/integrations/providers/openai"
repository = "https://github.com/langchain-ai/langchain/tree/master/libs/partners/openai"
changelog = "https://github.com/langchain-ai/langchain/releases?q=%22langchain-openai%22"
docs = "https://reference.langchain.com/python/integrations/langchain_openai/"
twitter = "https://x.com/LangChainAI"
slack = "https://www.langchain.com/join-community"
reddit = "https://www.reddit.com/r/LangChain/"

[dependency-groups]
test = [
    "pytest>=7.3.0,<8.0.0",
    "freezegun>=1.2.2,<2.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "syrupy>=4.0.2,<5.0.0",
    "pytest-watcher>=0.3.4,<1.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-retry>=1.7.0,<1.8.0",
    "pytest-socket>=0.6.0,<1.0.0",
    "pytest-xdist>=3.6.1,<4.0.0",
    "vcrpy>=7.0.0,<8.0.0",
    "numpy>=1.26.4; python_version<'3.13'",
    "numpy>=2.1.0; python_version>='3.13'",
    "langchain",
    "langchain-core",
    "langchain-tests",
]
lint = ["ruff>=0.13.1,<0.14.0"]
dev = ["langchain-core"]
test_integration = [
    "httpx>=0.27.0,<1.0.0",
    "pillow>=10.3.0,<11.0.0",
    "numpy>=1.26.4; python_version < '3.13'",
    "numpy>=2.1.0; python_version >= '3.13'",
]
typing = [
    "mypy>=1.17.1,<2.0.0",
    "types-tqdm>=4.66.0.5,<5.0.0.0",
    "langchain-core"
]

[tool.uv.sources]
langchain-core = { path = "../../core", editable = true }
langchain-tests = { path = "../../standard-tests", editable = true }
langchain = { path = "../../langchain_v1", editable = true }

[tool.mypy]
disallow_untyped_defs = "True"
[[tool.mypy.overrides]]
module = "transformers"
ignore_missing_imports = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812",  # Messes with the formatter
    "ISC001",  # Messes with the formatter
    "PERF203", # Rarely useful
    "SIM105",  # Rarely useful
    "FIX",     # TODOs
    "TD",      # TODOs
    "C901",    # Complex functions
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0914", # Too many local variables
    "PLR0915", # Too many statements
    "ARG001",
    "RUF001",
    "ERA001",
    "PLR0911",
    "FA100",  # from __future__ import annotations breaks some schema conversion logic

    # TODO
    "PLR2004", # Comparison to magic number
    "ANN401",
    "ARG002",
    "BLE001",
    "TC",
    "PLC0415",
    "PT011",
    "PT013",
    "TRY",
    "PLW",
    "PLE",
    "FBT",
    "A001",
    "B028",
    "YTT203",
    "RUF012",
    "B904",
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true  # ignore missing documentation for *args and **kwargs parameters

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5 --cov=langchain_openai"
markers = [
    "requires: mark tests as requiring a specific library",
    "compile: mark placeholder test used to compile integration tests without running them",
    "scheduled: mark tests to run in scheduled testing",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # Tests need assertions
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # Private member access in tests
    "D",     # Docstring checks in tests

    # TODO
    "B018",
    "PGH003",
    "PERF401",
    "PT017",
    "RUF012",
    "B017",
]
"scripts/*.py" = [
    "INP001",   # Not a package
]
