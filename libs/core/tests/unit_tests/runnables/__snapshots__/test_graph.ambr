# serializer version: 1
# name: test_double_nested_subgraph_mermaid[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	parent_1(parent_1)
  	parent_2(parent_2)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> parent_1;
  	child_child_2 --> parent_2;
  	parent_1 --> child_child_1_grandchild_1;
  	parent_2 --> __end__;
  	subgraph child
  	child_child_2(child_2)
  	child_child_1_grandchild_2 --> child_child_2;
  	subgraph child_1
  	child_child_1_grandchild_1(grandchild_1)
  	child_child_1_grandchild_2(grandchild_2<hr/><small><em>__interrupt = before</em></small>)
  	child_child_1_grandchild_1 --> child_child_1_grandchild_2;
  	end
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_graph_mermaid_duplicate_nodes[mermaid]
  '''
  graph TD;
  	PromptInput --> PromptTemplate_1;
  	Parallel_llm1_llm2_Input --> FakeListLLM_1;
  	FakeListLLM_1 --> Parallel_llm1_llm2_Output;
  	Parallel_llm1_llm2_Input --> FakeListLLM_2;
  	FakeListLLM_2 --> Parallel_llm1_llm2_Output;
  	PromptTemplate_1 --> Parallel_llm1_llm2_Input;
  	PromptTemplate_2 --> PromptTemplateOutput;
  	Parallel_llm1_llm2_Output --> PromptTemplate_2;
  
  '''
# ---
# name: test_graph_mermaid_frontmatter_config[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
    look: handDrawn
    theme: neutral
    themeVariables:
      primaryColor: '#e2e2e2'
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	my_node([my_node]):::last
  	__start__ --> my_node;
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_graph_sequence[ascii]
  '''
              +-------------+              
              | PromptInput |              
              +-------------+              
                      *                    
                      *                    
                      *                    
             +----------------+            
             | PromptTemplate |            
             +----------------+            
                      *                    
                      *                    
                      *                    
              +-------------+              
              | FakeListLLM |              
              +-------------+              
                      *                    
                      *                    
                      *                    
     +--------------------------------+    
     | CommaSeparatedListOutputParser |    
     +--------------------------------+    
                      *                    
                      *                    
                      *                    
  +--------------------------------------+ 
  | CommaSeparatedListOutputParserOutput | 
  +--------------------------------------+ 
  '''
# ---
# name: test_graph_sequence[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	PromptInput([PromptInput]):::first
  	PromptTemplate(PromptTemplate)
  	FakeListLLM(FakeListLLM<hr/><small><em>key = 2</em></small>)
  	CommaSeparatedListOutputParser(CommaSeparatedListOutputParser)
  	CommaSeparatedListOutputParserOutput([CommaSeparatedListOutputParserOutput]):::last
  	PromptInput --> PromptTemplate;
  	PromptTemplate --> FakeListLLM;
  	CommaSeparatedListOutputParser --> CommaSeparatedListOutputParserOutput;
  	FakeListLLM --> CommaSeparatedListOutputParser;
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_graph_sequence_map[ascii]
  '''
                                             +-------------+                                                 
                                             | PromptInput |                                                 
                                             +-------------+                                                 
                                                     *                                                       
                                                     *                                                       
                                                     *                                                       
                                            +----------------+                                               
                                            | PromptTemplate |                                               
                                            +----------------+                                               
                                                     *                                                       
                                                     *                                                       
                                                     *                                                       
                                             +-------------+                                                 
                                             | FakeListLLM |                                                 
                                             +-------------+                                                 
                                                     *                                                       
                                                     *                                                       
                                                     *                                                       
                                    +-------------------------------+                                        
                                    | Parallel<as_list,as_str>Input |                                        
                                    +-------------------------------+                                        
                                       *****                         ******                                  
                                    ***                                    ******                            
                                 ***                                             ******                      
            +------------------------------+                                           ****                  
            | conditional_str_parser_input |                                              *                  
            +------------------------------+                                              *                  
                   ***              ***                                                   *                  
                ***                    ***                                                *                  
              **                          **                                              *                  
  +-----------------+               +-----------------+                                   *                  
  | StrOutputParser |               | XMLOutputParser |                                   *                  
  +-----------------+               +-----------------+                                   *                  
                   ***              ***                                                   *                  
                      ***        ***                                                      *                  
                         **    **                                                         *                  
            +-------------------------------+                            +--------------------------------+  
            | conditional_str_parser_output |                            | CommaSeparatedListOutputParser |  
            +-------------------------------+                            +--------------------------------+  
                                       *****                         ******                                  
                                            ***                ******                                        
                                               ***         ****                                              
                                    +--------------------------------+                                       
                                    | Parallel<as_list,as_str>Output |                                       
                                    +--------------------------------+                                       
  '''
# ---
# name: test_graph_sequence_map[mermaid-simple]
  '''
  graph TD;
  	PromptInput --> PromptTemplate;
  	PromptTemplate --> FakeListLLM;
  	Parallel_as_list_as_str_Input --> CommaSeparatedListOutputParser;
  	CommaSeparatedListOutputParser --> Parallel_as_list_as_str_Output;
  	conditional_str_parser_input --> StrOutputParser;
  	StrOutputParser --> conditional_str_parser_output;
  	conditional_str_parser_input --> XMLOutputParser;
  	XMLOutputParser --> conditional_str_parser_output;
  	Parallel_as_list_as_str_Input --> conditional_str_parser_input;
  	conditional_str_parser_output --> Parallel_as_list_as_str_Output;
  	FakeListLLM --> Parallel_as_list_as_str_Input;
  
  '''
# ---
# name: test_graph_sequence_map[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	PromptInput([PromptInput]):::first
  	PromptTemplate(PromptTemplate)
  	FakeListLLM(FakeListLLM)
  	Parallel_as_list_as_str_Input(Parallel<as_list,as_str>Input)
  	Parallel_as_list_as_str_Output([Parallel<as_list,as_str>Output]):::last
  	CommaSeparatedListOutputParser(CommaSeparatedListOutputParser)
  	conditional_str_parser_input(conditional_str_parser_input)
  	conditional_str_parser_output(conditional_str_parser_output)
  	StrOutputParser(StrOutputParser)
  	XMLOutputParser(XMLOutputParser)
  	PromptInput --> PromptTemplate;
  	PromptTemplate --> FakeListLLM;
  	Parallel_as_list_as_str_Input --> CommaSeparatedListOutputParser;
  	CommaSeparatedListOutputParser --> Parallel_as_list_as_str_Output;
  	conditional_str_parser_input --> StrOutputParser;
  	StrOutputParser --> conditional_str_parser_output;
  	conditional_str_parser_input --> XMLOutputParser;
  	XMLOutputParser --> conditional_str_parser_output;
  	Parallel_as_list_as_str_Input --> conditional_str_parser_input;
  	conditional_str_parser_output --> Parallel_as_list_as_str_Output;
  	FakeListLLM --> Parallel_as_list_as_str_Input;
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_graph_single_runnable[ascii]
  '''
  +----------------------+   
  | StrOutputParserInput |   
  +----------------------+   
              *              
              *              
              *              
     +-----------------+     
     | StrOutputParser |     
     +-----------------+     
              *              
              *              
              *              
  +-----------------------+  
  | StrOutputParserOutput |  
  +-----------------------+  
  '''
# ---
# name: test_graph_single_runnable[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	StrOutputParserInput([StrOutputParserInput]):::first
  	StrOutputParser(StrOutputParser)
  	StrOutputParserOutput([StrOutputParserOutput]):::last
  	StrOutputParserInput --> StrOutputParser;
  	StrOutputParser --> StrOutputParserOutput;
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_parallel_subgraph_mermaid[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	outer_1(outer_1)
  	outer_2(outer_2)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> outer_1;
  	inner_1_inner_2 --> outer_2;
  	inner_2_inner_2 --> outer_2;
  	outer_1 --> inner_1_inner_1;
  	outer_1 --> inner_2_inner_1;
  	outer_2 --> __end__;
  	subgraph inner_1
  	inner_1_inner_1(inner_1)
  	inner_1_inner_2(inner_2<hr/><small><em>__interrupt = before</em></small>)
  	inner_1_inner_1 --> inner_1_inner_2;
  	end
  	subgraph inner_2
  	inner_2_inner_1(inner_1)
  	inner_2_inner_2(inner_2)
  	inner_2_inner_1 --> inner_2_inner_2;
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_single_node_subgraph_mermaid[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	__end__([<p>__end__</p>]):::last
  	__start__ --> sub_meow;
  	sub_meow --> __end__;
  	subgraph sub
  	sub_meow(meow)
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_trim
  dict({
    'edges': list([
      dict({
        'source': '__start__',
        'target': 'ask_question',
      }),
      dict({
        'source': 'ask_question',
        'target': 'answer_question',
      }),
      dict({
        'conditional': True,
        'source': 'answer_question',
        'target': 'ask_question',
      }),
      dict({
        'conditional': True,
        'source': 'answer_question',
        'target': '__end__',
      }),
    ]),
    'nodes': list([
      dict({
        'data': '__start__',
        'id': '__start__',
        'type': 'schema',
      }),
      dict({
        'data': dict({
          'id': list([
            'langchain',
            'schema',
            'output_parser',
            'StrOutputParser',
          ]),
          'name': 'ask_question',
        }),
        'id': 'ask_question',
        'type': 'runnable',
      }),
      dict({
        'data': dict({
          'id': list([
            'langchain',
            'schema',
            'output_parser',
            'StrOutputParser',
          ]),
          'name': 'answer_question',
        }),
        'id': 'answer_question',
        'type': 'runnable',
      }),
      dict({
        'data': '__end__',
        'id': '__end__',
        'type': 'schema',
      }),
    ]),
  })
# ---
# name: test_triple_nested_subgraph_mermaid[mermaid]
  '''
  ---
  config:
    flowchart:
      curve: linear
  ---
  graph TD;
  	__start__([<p>__start__</p>]):::first
  	parent_1(parent_1)
  	parent_2(parent_2)
  	__end__([<p>__end__</p>]):::last
  	__start__ --> parent_1;
  	child_child_2 --> parent_2;
  	parent_1 --> child_child_1_grandchild_1;
  	parent_2 --> __end__;
  	subgraph child
  	child_child_2(child_2)
  	child_child_1_grandchild_2 --> child_child_2;
  	subgraph child_1
  	child_child_1_grandchild_1(grandchild_1)
  	child_child_1_grandchild_2(grandchild_2<hr/><small><em>__interrupt = before</em></small>)
  	child_child_1_grandchild_1_greatgrandchild --> child_child_1_grandchild_2;
  	subgraph grandchild_1
  	child_child_1_grandchild_1_greatgrandchild(greatgrandchild)
  	child_child_1_grandchild_1 --> child_child_1_grandchild_1_greatgrandchild;
  	end
  	end
  	end
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
